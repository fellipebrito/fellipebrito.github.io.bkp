;; Analyzed by ClojureScript 0.0-2850
{:defs {scroll-into-view {:protocol-inline nil, :name dommy.core/scroll-into-view, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 24, :method-params ([elem align-with-top?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 284, :end-line 284, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem align-with-top?])), :test true}, toggle-attr! {:protocol-inline nil, :name dommy.core/toggle-attr!, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 20, :method-params ([elem k] [elem k add?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 2} {:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 3}), :line 211, :end-line 211, :max-fixed-arity 3, :fn-var true, :arglists (quote ([elem k] [elem k add?])), :doc "Toggles a dom attribute `k` on `elem`, optionally specifying\n   the boolean value with `add?`", :test true}, replace-contents! {:protocol-inline nil, :name dommy.core/replace-contents!, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 25, :method-params ([p child]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 359, :end-line 359, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p child])), :doc "Replace children of `elem` with `child`", :test true}, elem-and-selector {:protocol-inline nil, :private true, :name dommy.core/elem-and-selector, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 26, :method-params ([elem-sel]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{cljs.core/IVector any}, :variadic false, :max-fixed-arity 1}), :line 413, :end-line 413, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem-sel])), :test true}, remove! {:protocol-inline nil, :name dommy.core/remove!, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 15, :method-params ([elem] [p elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:variadic false, :max-fixed-arity 2}), :line 364, :end-line 364, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem] [p elem])), :doc "Remove `elem` from `parent`, return `parent`", :test true}, show! {:protocol-inline nil, :name dommy.core/show!, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 13, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 282, :end-line 282, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem])), :test true}, hide! {:protocol-inline nil, :name dommy.core/hide!, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 13, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 279, :end-line 279, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem])), :test true}, set-html! {:protocol-inline nil, :name dommy.core/set-html!, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 17, :method-params ([elem html]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 135, :end-line 135, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem html])), :doc "Set the innerHTML of `elem` to `html`", :test true}, listen! {:protocol-inline nil, :name dommy.core/listen!, :variadic true, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 15, :method-params ([elem-sel type-fs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic true, :max-fixed-arity 1}), :line 419, :end-line 419, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem-sel & type-fs])), :doc "Adds `f` as a listener for events of type `event-type` on\n   `elem-sel`, which must either be a DOM node, or a sequence\n   whose first item is a DOM node.\n\n   In other words, the call to `listen!` can take two forms:\n\n   If `elem-sel` is a DOM node, i.e., you're doing something like:\n\n       (listen! elem :click click-handler)\n\n   then `click-handler` will be set as a listener for `click` events\n   on the `elem`.\n\n   If `elem-sel` is a sequence:\n\n       (listen! [elem :.selector.for :.some.descendants] :click click-handler)\n\n   then `click-handler` will be set as a listener for `click` events\n   on descendants of `elem` that match the selector\n\n   Also accepts any number of event-type and handler pairs for setting\n   multiple listeners at once:\n\n       (listen! some-elem :click click-handler :hover hover-handler)", :test true}, set-value! {:protocol-inline nil, :name dommy.core/set-value!, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 18, :method-params ([elem value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 141, :end-line 141, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem value])), :doc "Set the value of `elem` to `value`", :test true}, set-style! {:protocol-inline nil, :name dommy.core/set-style!, :variadic true, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 18, :method-params ([elem kvs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic true, :max-fixed-arity 1}), :line 152, :end-line 152, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem & kvs])), :doc "Set the style of `elem` using key-value pairs:\n\n      (set-style! elem :display \"block\" :color \"red\")", :test true}, set-class! {:protocol-inline nil, :name dommy.core/set-class!, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 18, :method-params ([elem c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 147, :end-line 147, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem c])), :doc "Set the css class of `elem` to `elem`", :test true}, has-class? {:protocol-inline nil, :name dommy.core/has-class?, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 27, :method-params ([elem c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{boolean any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 51, :ret-tag boolean, :end-line 51, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([elem c])), :doc "Does `elem` contain `c` in its class list", :test true}, set-attr! {:protocol-inline nil, :name dommy.core/set-attr!, :variadic true, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 17, :method-params ([elem k] [elem k v] [elem k v kvs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 2} {:tag #{nil clj-nil}, :variadic false, :max-fixed-arity 3} {:variadic true, :max-fixed-arity 3}), :line 173, :end-line 173, :max-fixed-arity 3, :fn-var true, :arglists (quote ([elem k] [elem k v] [elem k v & kvs])), :doc "Sets dom attributes on and returns `elem`.\n   Attributes without values will be set to \"true\":\n\n       (set-attr! elem :disabled)\n\n   With values, the function takes variadic kv pairs:\n\n       (set-attr! elem :id \"some-id\"\n                       :name \"some-name\")", :test true}, text {:protocol-inline nil, :name dommy.core/text, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 12, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem])), :test true}, listen-once! {:protocol-inline nil, :name dommy.core/listen-once!, :variadic true, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 20, :method-params ([elem-sel type-fs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic true, :max-fixed-arity 1}), :line 487, :end-line 487, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem-sel & type-fs])), :doc "Behaves like `listen!`, but removes the listener after the first event occurs.", :test true}, attr {:protocol-inline nil, :name dommy.core/attr, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 12, :method-params ([elem k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem k])), :test true}, html {:protocol-inline nil, :name dommy.core/html, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 12, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem])), :test true}, children {:protocol-inline nil, :name dommy.core/children, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 16, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem])), :test true}, selector {:protocol-inline nil, :name dommy.core/selector, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 16, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any string clj-nil}, :variadic false, :max-fixed-arity 1}), :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :doc "Returns a selector in string format.\n   Accepts string, keyword, or collection.", :test true}, set-text! {:protocol-inline nil, :name dommy.core/set-text!, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 17, :method-params ([elem text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 127, :end-line 127, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem text])), :doc "Set the textContent of `elem` to `text`, fall back to innerText", :test true}, update-event-listeners! {:protocol-inline nil, :private true, :name dommy.core/update-event-listeners!, :variadic true, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 32, :method-params ([elem f args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic true, :max-fixed-arity 2}), :line 407, :end-line 407, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem f & args])), :test true}, add-class! {:protocol-inline nil, :name dommy.core/add-class!, :variadic true, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 18, :method-params ([elem classes] [elem classes more-classes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2} {:variadic true, :max-fixed-arity 2}), :line 221, :end-line 221, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem classes] [elem classes & more-classes])), :doc "Add `classes` to `elem`, trying to use Element::classList, and\n   falling back to fast string parsing/manipulation", :test true}, parent {:protocol-inline nil, :name dommy.core/parent, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 14, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem])), :test true}, descendant? {:protocol-inline nil, :name dommy.core/descendant?, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 28, :method-params ([descendant ancestor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{boolean any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 113, :ret-tag boolean, :end-line 113, :max-fixed-arity 2, :tag boolean, :fn-var true, :arglists (quote ([descendant ancestor])), :doc "Is `descendant` a descendant of `ancestor`?\n   (http://goo.gl/T8pgCX)", :test true}, insert-before! {:protocol-inline nil, :name dommy.core/insert-before!, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 22, :method-params ([elem other]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 335, :end-line 335, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem other])), :doc "Insert `elem` before `other`, `other` must have a parent", :test true}, remove-class! {:protocol-inline nil, :name dommy.core/remove-class!, :variadic true, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 21, :method-params ([elem c] [elem class classes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2} {:tag clj-nil, :variadic true, :max-fixed-arity 2}), :line 240, :end-line 240, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem c] [elem class & classes])), :doc "Remove `c` from `elem` class list", :test true}, value {:protocol-inline nil, :name dommy.core/value, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 13, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem])), :test true}, set-px! {:protocol-inline nil, :name dommy.core/set-px!, :variadic true, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 15, :method-params ([elem kvs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic true, :max-fixed-arity 1}), :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem & kvs])), :test true}, insert-after! {:protocol-inline nil, :name dommy.core/insert-after!, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 21, :method-params ([elem other]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 343, :end-line 343, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem other])), :doc "Insert `elem` after `other`, `other` must have a parent", :test true}, append! {:protocol-inline nil, :name dommy.core/append!, :variadic true, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 15, :method-params ([parent child] [parent child more-children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2} {:variadic true, :max-fixed-arity 2}), :line 313, :end-line 313, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parent child] [parent child & more-children])), :doc "Append `child` to `parent`", :test true}, px {:protocol-inline nil, :name dommy.core/px, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 10, :method-params ([elem k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem k])), :test true}, live-listener {:protocol-inline nil, :name dommy.core/live-listener, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 21, :method-params ([elem selector f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 3}), :line 393, :end-line 393, :max-fixed-arity 3, :fn-var true, :arglists (quote ([elem selector f])), :doc "fires f if event.target is found with `selector`", :test true}, clear! {:protocol-inline nil, :name dommy.core/clear!, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 14, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 308, :end-line 308, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem])), :doc "Clears all children from `elem`", :test true}, remove-attr! {:protocol-inline nil, :name dommy.core/remove-attr!, :variadic true, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 20, :method-params ([elem k] [elem k ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2} {:variadic true, :max-fixed-arity 2}), :line 196, :end-line 196, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem k] [elem k & ks])), :doc "Removes dom attributes on and returns `elem`.\n   `class` and `classes` are special cases which clear\n   out the class name on removal.", :test true}, matches-pred {:protocol-inline nil, :name dommy.core/matches-pred, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 20, :method-params ([base selector] [selector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 2} {:tag function, :variadic false, :max-fixed-arity 1}), :line 91, :end-line 91, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base selector] [selector])), :doc "Returns a predicate on nodes that match `selector` at the\n   time of this `matches-pred` call (may return outdated results\n   if you fuck with the DOM)", :test true}, create-text-node {:protocol-inline nil, :name dommy.core/create-text-node, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 24, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 301, :end-line 301, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text])), :test true}, ancestors {:protocol-inline nil, :name dommy.core/ancestors, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 17, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1}), :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem])), :doc "Lazy seq of the ancestors of `elem`", :test true}, style {:protocol-inline nil, :name dommy.core/style, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 13, :method-params ([elem] [elem k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj any cljs.core/MetaFn clj-nil}, :variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2}), :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem] [elem k])), :doc "The computed style of `elem`, optionally specifying the key of\n   a particular style to return", :test true}, unlisten! {:protocol-inline nil, :name dommy.core/unlisten!, :variadic true, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 17, :method-params ([elem-sel type-fs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic true, :max-fixed-arity 1}), :line 461, :end-line 461, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem-sel & type-fs])), :doc "Removes event listener for the element defined in `elem-sel`,\n   which is the same format as listen!.\n\n  The following forms are allowed, and will remove all handlers\n  that match the parameters passed in:\n\n      (unlisten! [elem :.selector] :click event-listener)\n\n      (unlisten! [elem :.selector]\n        :click event-listener\n        :mouseover other-event-listener)", :test true}, toggle-class! {:protocol-inline nil, :name dommy.core/toggle-class!, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 21, :method-params ([elem c] [elem class add?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2} {:variadic false, :max-fixed-arity 3}), :line 255, :end-line 255, :max-fixed-arity 3, :fn-var true, :arglists (quote ([elem c] [elem class add?])), :doc "(toggle-class! elem class) will add-class! if elem does not have class\n   and remove-class! otherwise.\n   (toggle-class! elem class add?) will add-class! if add? is truthy,\n   otherwise it will remove-class!", :test true}, class {:protocol-inline nil, :name dommy.core/class, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 13, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem])), :test true}, replace! {:protocol-inline nil, :name dommy.core/replace!, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 16, :method-params ([elem new]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 351, :end-line 351, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem new])), :doc "Replace `elem` with `new`, return `new`", :test true}, event-listeners {:protocol-inline nil, :private true, :name dommy.core/event-listeners, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 24, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any cljs.core/IMap}, :variadic false, :max-fixed-arity 1}), :line 402, :end-line 402, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem])), :doc "Returns a nested map of event listeners on `elem`", :test true}, hidden? {:protocol-inline nil, :name dommy.core/hidden?, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 24, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 61, :ret-tag boolean, :end-line 61, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([elem])), :doc "Is `elem` hidden (as associated with hide!/show!/toggle!, using display: none)", :test true}, bounding-client-rect {:protocol-inline nil, :name dommy.core/bounding-client-rect, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 28, :method-params ([elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 1}), :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([elem])), :doc "Returns a map of the bounding client rect of `elem`\n   as a map with [:top :left :right :bottom :width :height]", :test true}, toggle! {:protocol-inline nil, :name dommy.core/toggle!, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 15, :method-params ([elem show?] [elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2} {:tag any, :variadic false, :max-fixed-arity 1}), :line 272, :end-line 272, :max-fixed-arity 2, :fn-var true, :arglists (quote ([elem show?] [elem])), :doc "Display or hide the given `elem` (using display: none).\n   Takes an optional boolean `show?`", :test true}, closest {:protocol-inline nil, :name dommy.core/closest, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 15, :method-params ([base elem selector] [elem selector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 3} {:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 102, :end-line 102, :max-fixed-arity 3, :fn-var true, :arglists (quote ([base elem selector] [elem selector])), :doc "Closest ancestor of `elem` (up to `base`, if provided)\n   that matches `selector`", :test true}, prepend! {:protocol-inline nil, :name dommy.core/prepend!, :variadic true, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 16, :method-params ([parent child] [parent child more-children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2} {:variadic true, :max-fixed-arity 2}), :line 324, :end-line 324, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parent child] [parent child & more-children])), :doc "Prepend `child` to `parent`", :test true}, ancestor-nodes {:file "resources/public/js/compiled/out/dommy/core.cljs", :line 89, :column 1, :end-line 89, :end-column 44, :deprecated "1.0.0", :test true, :name dommy.core/ancestor-nodes}, special-listener-makers {:file "resources/public/js/compiled/out/dommy/core.cljs", :line 377, :column 1, :end-line 377, :end-column 30, :test true, :name dommy.core/special-listener-makers}, create-element {:protocol-inline nil, :name dommy.core/create-element, :variadic false, :file "resources/public/js/compiled/out/dommy/core.cljs", :end-column 22, :method-params ([tag] [tag-ns tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2}), :line 294, :end-line 294, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tag] [tag-ns tag])), :test true}}, :name dommy.core, :doc "Core DOM manipulation functions", :excludes #{ancestors class}, :use-macros {sel dommy.core}, :require-macros {dommy.core dommy.core}, :uses {as-str dommy.utils}, :requires {utils dommy.utils, dommy.utils dommy.utils, clojure.string clojure.string, str clojure.string}, :imports nil}