;; Analyzed by ClojureScript 0.0-2850
{:defs {remove-class-str {:protocol-inline nil, :name dommy.utils/remove-class-str, :variadic false, :file "resources/public/js/compiled/out/dommy/utils.cljs", :end-column 24, :method-params ([init-class-name class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([init-class-name class])), :test true}, class-index {:protocol-inline nil, :name dommy.utils/class-index, :variadic false, :file "resources/public/js/compiled/out/dommy/utils.cljs", :end-column 19, :method-params ([class-name class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([class-name class])), :doc "Finds the index of class in a space-delimited class-name\n    only will be used when Element::classList doesn't exist", :test true}, class-match? {:protocol-inline nil, :name dommy.utils/class-match?, :variadic false, :file "resources/public/js/compiled/out/dommy/utils.cljs", :end-column 29, :method-params ([class-name class idx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{boolean clj-nil}, :variadic false, :max-fixed-arity 3}), :line 25, :ret-tag boolean, :end-line 25, :max-fixed-arity 3, :tag boolean, :fn-var true, :arglists (quote ([class-name class idx])), :doc "Does `class-name` string have class starting at index idx.\n   only will be used when Element::classList doesn't exist", :test true}, as-str {:protocol-inline nil, :name dommy.utils/as-str, :variadic false, :file "resources/public/js/compiled/out/dommy/utils.cljs", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Coerces strings and keywords to strings, while preserving namespace of\n   namespaced keywords", :test true}, ->Array {:protocol-inline nil, :name dommy.utils/->Array, :variadic false, :file "resources/public/js/compiled/out/dommy/utils.cljs", :end-column 15, :method-params ([array-like]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([array-like])), :test true}, dissoc-in {:protocol-inline nil, :name dommy.utils/dissoc-in, :variadic false, :file "resources/public/js/compiled/out/dommy/utils.cljs", :end-column 17, :method-params ([m p__19802]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{clj clj-nil}, :variadic false, :max-fixed-arity 2}), :line 3, :end-line 3, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m [k & ks]])), :doc "Dissociate this keyseq from m, removing any empty maps created as a result\n   (including at the top-level).", :test true}}, :name dommy.utils, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires nil, :imports nil}